plant:
  template:
    - base
    - circle
#  tap_action:
#    action: fire-dom-event
#    browser_mod:
#      command: popup
#      title: >
#        [[[
#          return !entity || entity.attributes.friendly_name;
#        ]]]
#      style:
#        hui-entities-card:
#          $: |
#            #states {
#              padding-top: 0.8em;
#            }
#      card:
#        type: entities
#        entities: >
#          [[[
#            if (entity) {
#                let lights = [],
#                    id = Boolean(entity.attributes.entity_id)
#                        ? [entity.entity_id].concat(entity.attributes.entity_id)
#                        : [entity.entity_id];
#
#                for (let i = 0; i < id.length; i++) {
#                    lights.push({
#                        "type": "custom:mushroom-light-card",
#                        "entity": id[i],
#                        "fill_container": false,
#                        "primary_info": "name",
#                        "secondary_info": "state",
#                        "icon_type": "icon",
#                        "show_brightness_control": true,
#                        "use_light_color": true,
#                        "show_color_temp_control": true,
#                        "show_color_control": true,
#                        "collapsible_controls": true
#                    });
#                }
#                return lights;
#            }
#          ]]]
  variables:
    circle_input: >
      [[[
        if (entity) {
          if (entity.state === 'problem' && entity.attributes.problem.includes('brightness')) {
              return Math.round(entity.attributes.brightness).toString()
          } else if (entity.state === 'problem' && entity.attributes.problem.includes('temperature')) {
              return Math.round(entity.attributes.temperature).toString()
          } else if (entity.attributes.temperature > 10 && entity.attributes.temperature < 15) {
              return Math.round(entity.attributes.temperature).toString()
          } else {
              return Math.round(entity.attributes.moisture).toString()
          }
        }
      ]]]
    circle_input_unit: >
      [[[
        if (entity) {
          if (entity.state === 'problem' && entity.attributes.problem.includes('brightness')) {
              return "lux"
          } else if (entity.state === 'problem' && entity.attributes.problem.includes('temperature')) {
              return "°C"
          } else if (entity.attributes.temperature > 10 && entity.attributes.temperature < 15) {
              return "°C"
          } else {
              return "%"
          }
        }
      ]]]
