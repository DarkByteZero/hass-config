template:
  ####################################################
  #                                                  #
  #                      SELECT                      #
  #                                                  #
  ####################################################

  - select:
      #      - name: conditional_media
      #        state: >
      #          {% set recently_added = 'Senast tillagt' %}
      #          {% set paused_timeout_minutes = 15 %}
      #          {% set media_players = [
      #            states.media_player.vardagsrum,
      #            states.media_player.sovrum,
      #            states.media_player.spotify,
      #            states.media_player.kok ] %}
      #
      #          {% macro media(state) %}
      #          {% set state = media_players | selectattr('state','eq',state) | list %}
      #          {% set last_changed = recently_added if state | length == 0 else state | map(attribute='last_changed') | list | max %}
      #            {{ state | selectattr('last_changed','eq', last_changed) | map(attribute='name') | list | join }}
      #          {% endmacro %}
      #
      #          {% set playing = media_players | selectattr('state','eq','playing') | list %}
      #          {% set timeout_playing = False if playing | length == 0 else
      #            (as_timestamp(now()) - as_timestamp(playing | map(attribute='last_changed') | list | max)) < paused_timeout_minutes * 60 %}
      #
      #          {% set paused = media_players | selectattr('state','eq','paused') | list %}
      #          {% set timeout_paused = False if paused | length == 0 else
      #            (as_timestamp(now()) - as_timestamp(paused | map(attribute='last_changed') | list | max)) < paused_timeout_minutes * 60 %}
      #
      #          {% if playing %}
      #            {{ media('playing') if timeout_playing else media('paused') if timeout_paused else media('playing') }}
      #          {% elif paused %}
      #            {{ media('paused') if timeout_paused else recently_added }}
      #          {% else %}
      #            {{ recently_added }}
      #          {% endif %}
      #        options: >
      #          {% set recently_added = ['Senast tillagt'] %}
      #          {% set media_players = [
      #            states.media_player.vardagsrum,
      #            states.media_player.sovrum,
      #            states.media_player.spotify,
      #            states.media_player.kok ] %}
      #          {{ recently_added + media_players | map(attribute='name') | list }}
      #        select_option:
      #          service: select.select_option
      #          target:
      #            entity_id: select.conditional_media
      #          data:
      #            option: >
      #              {{ option }}
      #
      - name: herbert_speed
        state: >
          {% set fan_speed = state_attr('vacuum.herbert', 'fan_speed') %}
          {{ 'Standard' if fan_speed == None else fan_speed }}
        options: >
          {% set fan_speed_list = state_attr('vacuum.herbert', 'fan_speed_list') %}
          {{ ['Standard'] if fan_speed_list == None else fan_speed_list }}
        select_option:
          service: vacuum.set_fan_speed
          target:
            entity_id: vacuum.herbert
          data:
            fan_speed: >
              {{ option }}

      - name: herbert_water
        state: >
          {% set fan_speed = state_attr('vacuum.herbert', 'fan_speed') %}
          {{ 'Standard' if fan_speed == None else fan_speed }}
        options: >
          {% set fan_speed_list = state_attr('vacuum.herbert', 'fan_speed_list') %}
          {{ ['Standard'] if fan_speed_list == None else fan_speed_list }}
        select_option:
          service: vacuum.set_fan_speed
          target:
            entity_id: vacuum.herbert
          data:
            fan_speed: >
              {{ option }}

      - name: hdmi_living_room_tv
        state: >
          {% set source = state_attr('media_player.living_room_tv', 'source') %}
          {{ 'HDMI' if source == None else source }}
        options: >
          {% set source_list = state_attr('media_player.living_room_tv', 'source_list') %}
          {{ ['HDMI'] if source_list == None else source_list }}
        select_option:
          service: media_player.select_source
          target:
            entity_id: media_player.living_room_tv
          data:
            source: >
              {{ option }}

    ####################################################
    #                                                  #
    #                  BINARY SENSOR                   #
    #                                                  #
    ####################################################

    #  - binary_sensor:
    #      - unique_id: imac_vpn
    #        state: >
    #          {{ is_state('switch.computer_imac', 'on') and
    #          states('sensor.imac_ip') != states('sensor.myip') }}
    #        attributes:
    #          friendly_name: VPN
    #          icon: >
    #            mdi:shield-{{ iif(is_state('switch.computer_imac', 'on') and
    #            states('sensor.imac_ip') == states('sensor.myip'), 'alert', 'check') }}
    #          device_class: connectivity
    #
    #      - unique_id: udm_internet
    #        state: >
    #          {{ states('sensor.udm_unifios').split('|\n')[4] | default }}
    #        attributes:
    #          friendly_name: Internet
    #          icon: mdi:wan
    #          device_class: connectivity
    #
    #      - unique_id: udm_upgradable
    #        state: >
    #          {{ states('sensor.udm_unifios').split('|\n')[7] | default }}
    #        attributes:
    #          friendly_name: Uppdatering
    #          icon: mdi:update
    #          device_class: update
    #
    ####################################################
    #                                                  #
    #                      SENSOR                      #
    #                                                  #
    ####################################################

  - sensor:
      - unique_id: herbert_filter
        icon: custom:roborock-filter
        unit_of_measurement: "%"
        state: >
          {{ (states('sensor.herbert_filter_left') | int(default=0) / 5400) | int(default=0) }}
        attributes:
          friendly_name: Filter Herbert

      - unique_id: herbert_mainbrush
        icon: custom:roborock-mainbrush
        unit_of_measurement: "%"
        state: >
          {{ (states('sensor.herbert_main_brush_left') | int(default=0) / 10800) | int(default=0) }}
        attributes:
          friendly_name: Hauptbürste Herbert

      - unique_id: herbert_sensors
        icon: custom:roborock-sensor
        unit_of_measurement: "%"
        state: >
          {{ (states('sensor.herbert_sensor_dirty_left') | int(default=0) / 1080) | int(default=0) }}
        attributes:
          friendly_name: Sensoren Herbert

      - unique_id: herbert_sidebrush
        icon: custom:roborock-sidebrush
        unit_of_measurement: "%"
        state: >
          {{ (states('sensor.herbert_side_brush_left') | int(default=0) / 7200) | int(default=0) }}
        attributes:
          friendly_name: Seitenbürste Herbert

      - unique_id: sidebar
        state: template
        attributes:
          time: >
            {% set hours = now().strftime('%H') %}
            {% set minutes = now().strftime('%M') %}
            <span class="time">
              {{ hours }}<span class="time-colon">:</span>{{ minutes }}
            </span>
          date: >
            <font color=' 6a7377'><b>
            {% if strptime(states('sensor.date'), '%Y-%m-%d').day != null %}
            {% set days = ['Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag', 'Sonntag'] %}
            {% set months = ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni',
            'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'] %}
              {{ days[now().weekday()] }}<br>
              {{ strptime(states('sensor.date'), '%Y-%m-%d').day }} {{ months[now().month-1] }}
            {% endif %}
            </b></font>
          greet: >
            <b>
            {% set time = now().hour %}
            {% if time <= 1 %}  Gute Nacht {{'\U0001F611'}}
            {% elif time <= 3 %}  Gute Nacht {{'\U0001F62A'}}
            {% elif time <= 5 %}  Gute Nacht {{'\U0001F634'}}
            {% elif time <= 7 %} Guten Morgen {{'\U0001F4A9'}}
            {% elif time <= 9 %} Guten Morgen {{'\u2615\uFE0F'}}
            {% elif time <= 10 %} Guten Morgen {{'\U0001F642'}}
            {% elif time <= 13 %} Guten Tag {{'\U0001F60A'}}
            {% elif time <= 15 %} Guten Tag {{'\U0001F60E'}}
            {% elif time <= 17 %} Guten Tag {{'\U0001F44B\U0001F3FB'}}
            {% elif time <= 19 %} Guten Abend {{'\U0001F44B\U0001F3FB'}}
            {% elif time <= 22 %} Guten Abend {{'\U0001F60C'}}
            {% elif time <= 23 %} Guten Abend {{'\U0001F974'}}
            {% else %} Guten Abend {{'\U0001F974'}}
            {% endif %}
            </b>
          active: >
            <b>
            {% set lights = [
              states.light.couchlampe,
              states.light.conny_deckenlampe,
              states.light.dachboden_deckenlampe,
              states.light.rgb_light_strip_bett,
              states.light.rgbw_strip_kueche_waschbecken,
              states.light.kreislampen,
              states.light.wandstrahler,
              states.light.garten_light,
              states.light.garten_2_light,
              states.light.wohnzimmer_deckenlampen,
              states.switch.aquarium_licht,
              states.light.rgb_light_strip_treppe,
              states.light.bad_deckenlampen
            ] %}

            {% set switches = [
              states.fan.pure_humidify_cool
            ] %}

            {% set media_players = [
              states.media_player.sony_bravia_tv
            ] %}

            {% set lights_on = lights | selectattr('state','eq','on') | list %}
            {% set lights_name = lights | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}

            {% set switches_on = switches | selectattr('state','eq','on') | list %}
            {% set media_players_playing = media_players | selectattr('state','eq','playing') | list %}
            {% set append = switches_on + media_players_playing %}
            {% set switches_name = append | map(attribute='name') | join(', ') %}

            {% if (lights_on | length == 0) and (switches_on | length > 0) %}
              {{ switches_name | regex_replace(',([^,]*)$',' und\\1') }} ist an

            {% elif (lights_on | length == 1) and (switches_on | length == 1) %}
              {{ lights_name }} und {{switches_name }} ist an

            {% elif (lights_on | length == 1) and (switches_on | length > 1) %}
              {{ lights_name }}, {{ switches_name | regex_replace(',([^,]*)$',' och\\1') }} är på

            {% elif (lights_on | length > 1) and (switches_on | length == 1) %}
              {{ lights_on | length }} Lampen und {{ switches_name }} sind an

            {% elif (lights_on | length > 1) and (switches_on | length > 1) %}
              {{ lights_on | length }} Lampen, {{ switches_name | regex_replace(',([^,]*)$',' und\\1') }} sind an

            {% elif (lights_on | length == 1) and (switches_on | length == 0) %}
              {{ lights_name }} ist an

            {% elif (lights_on | length > 1) and (switches_on | length == 0) %}
              {{ lights_on | length }} Lichter sind an

            {% else %}
              <font color=' 6a7377'>Alles ist aus</font>
            {% endif %}
            </b>
          open: >
            <b>
            {% set windows = [
              states.binary_sensor.couch_fenster_links_contact,
              states.binary_sensor.couch_fenster_mitte_contact,
              states.binary_sensor.couch_fenster_rechts_contact,

              states.binary_sensor.dachboden_fenster_hinten_contact,
              states.binary_sensor.dachboden_fenster_links_contact,
              states.binary_sensor.dachboden_fenster_mitte_contact,
              states.binary_sensor.dachboden_fenster_rechts_contact,
              states.binary_sensor.dachboden_fenster_kleines_fenster_contact,

              states.binary_sensor.esszimmer_fenster_links_contact,
              states.binary_sensor.esszimmer_fenster_mitte_contact,
              states.binary_sensor.esszimmer_fenster_rechts_contact,

              states.binary_sensor.hund_fenster_contact,

              states.binary_sensor.kuche_fenster_links_contact,
              states.binary_sensor.kuche_fenster_rechts_contact,

              states.binary_sensor.lennart_fenster_links_contact,
              states.binary_sensor.lennart_fenster_mitte_contact,
              states.binary_sensor.lennart_fenster_rechts_contact,

              states.binary_sensor.mama_buro_fenster_links_unten_contact,
              states.binary_sensor.mama_buro_fenster_links_oben_contact,
              states.binary_sensor.mama_buro_fenster_rechts_unten_contact,
              states.binary_sensor.mama_buro_fenster_rechts_oben_contact,

              states.binary_sensor.mama_fenster_links_contact,
              states.binary_sensor.mama_fenster_rechts_contact,
              states.binary_sensor.mama_fenster_hinten_contact,

              states.binary_sensor.papa_buro_fenster_unten_contact,

              states.binary_sensor.wohnung_unten_kuche_fenster_unten_contact,
              states.binary_sensor.wohnung_unten_schlafzimmer_fenster_links_contact,
              states.binary_sensor.wohnung_unten_schlafzimmer_fenster_rechts_contact,

              states.binary_sensor.wohnzimmer_fenster_links_contact,
              states.binary_sensor.wohnzimmer_fenster_rechts_contact
            ] %}

            {% set doors = [
              states.binary_sensor.aussentur_hof_contact,
              states.binary_sensor.aussentur_strasse_contact,
              states.binary_sensor.kellertur_aussen_contact,
              states.binary_sensor.kellertur_innen_contact,
              states.binary_sensor.lennart_zimmertur_contact,
              states.binary_sensor.mama_zimmertur_contact,
              states.binary_sensor.wohnung_unten_tur_contact,
              states.binary_sensor.wohnungstur_contact,
              states.binary_sensor.flur,
              states.binary_sensor.buro_trenntur_contact,
              states.binary_sensor.burotur_contact
            ] %}


            {% set windows_open = windows | selectattr('state','eq','on') | list %}
            {% set windows_name = windows | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}

            {% set doors_open = doors | selectattr('state','eq','on') | list %}
            {% set doors_name = doors | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}


            {% if (windows_open | length == 0) and (doors_open | length > 1) %}
              {{ doors_open | length }} Türen geöffnet

            {% elif (windows_open | length == 1) and (doors_open | length == 1) %}
              {{ windows_name }} und {{ doors_name }} ist offen

            {% elif (windows_open | length == 1) and (doors_open | length > 1) %}
              {{ doors_open | length }} Türen und  {{ windows_name }} geöffnet

            {% elif (windows_open | length > 1) and (doors_open | length == 1) %}
              {{ windows_open | length }} Fenster und {{ doors_name }} geöffnet

            {% elif (windows_open | length > 1) and (doors_open | length > 1) %}
              {{ windows_open | length }} Fenster und {{ doors_open | length }} Türen geöffnet

            {% elif (windows_open | length == 1) and (doors_open | length == 0) %}
              {{ windows_name }} offen

            {% elif (doors_open | length == 1) and (windows_open | length == 0) %}
              {{ doors_name }} offen

            {% elif (windows_open | length > 1) and (doors_open | length == 0) %}
              {{ windows_open | length }} Fenster geöffnet



            {% else %}
              <font color=' 6a7377'>Alles ist zu</font>
            {% endif %}
            </b>
          mailbox: >
            {% set mailbox = states('sensor.mailbox') %}
            {% if is_state('binary_sensor.briefkasten_contact', 'on') %}
              {{ '\U0001F4EC' }} <font color=' 6a7377'><b>Briefkasten  offen!</b></font>
            {% elif mailbox | int(default=0) > 0 %}
              {{ '\U0001F4EC' }} <font color=' 6a7377'><b>Briefkasten ({{ mailbox }})</b></font>
            {% endif %}
          vacuum: >
            {% set entity_id = 'vacuum.herbert' %}
            {% if is_state(entity_id, 'cleaning') %}
              <b>Herbert reinigt</b>
            {% elif is_state(entity_id, 'returning') %}
              <b>Herbert ist fertig</b>
            {% endif %}
          weather: >
            {% set temperature = states('sensor.weatherlink_temp') %}
            {% set apparent = states('sensor.hauptstrasse_18_realfeel_temperature') %}
            {% set precip = state_attr('weather.hauptstrasse_18', 'forecast').0.precipitation_probability %}
            {% if not is_state('weather.hauptstrasse_18', 'unknown') %}
              {% if temperature | float(default=0) <= 0.0 %}
                Außen {{ temperature }}°C mit {{ precip }}% Schneerisiko {{'\u2744\uFE0F'}}
              {% elif temperature | float(default=0) > 0.0 %}
                Außen {{ temperature }}°C mit {{ precip }}% Regenrisiko {{ '\u2614\uFE0F' if precip > 30 }}
              {% endif %}
            {% else %}
              Kann die Wetterinformationen nicht lesen...
            {% endif %}
          #           transport: >
          #             {{ states('sensor.skanetrafiken') }}
          #           laundry: >
          #             {% set start_time = state_attr('calendar.tvatta', 'start_time') %}
          #             {% if start_time != None %}
          #               {% set time = as_timestamp(start_time) | timestamp_custom('%H:%M') %}
          #               {% set hours = as_timestamp(start_time) | timestamp_custom('%H') | int(default=0) / 24 %}
          #               {% set count = (as_timestamp(start_time) - as_timestamp(now())) / 86400 - hours %}
          #               {% set day = strptime(start_time, '%Y-%m-%d %H:%M:%S').strftime('%A')
          #               | replace('Monday', 'Måndag')
          #               | replace('Tuesday', 'Tisdag')
          #               | replace('Wednesday', 'Onsdag')
          #               | replace('Thursday', 'Torsdag')
          #               | replace('Friday', 'Fredag')
          #               | replace('Saturday', 'Lördag')
          #               | replace('Sunday', 'Söndag') %}
          #               {% if count <= 0.0 %}
          #                 {{'\U0001F4A6'}} Tvätt idag {{ time }}
          #               {% elif count <= 1.0 %}
          #                 Tvätt imorgon klockan {{ time }}
          #               {% elif count <= 2.0 %}
          #                 Tvätt i övermorgon klockan {{ time }}
          #               {% else %}
          #                 Tvätt om {{ (count + hours) | round }} dagar på {{ day }} kl {{ time }}
          #               {% endif %}
          #             {% endif %}
          battery: >
            {% set entities = states.sensor
              | selectattr('entity_id', 'search', 'battery')
              | rejectattr('entity_id', 'search', 'iphone')
              | rejectattr('entity_id', 'search', 'ipad')
              | rejectattr('entity_id', 'search', 'watch')
              | rejectattr('entity_id', 'search', 'macbook')
              | map(attribute = 'entity_id') | list %}
            {% for sensor in entities if states(sensor) != 'unknown' and states(sensor) !=
            'unavailable' and states(sensor) != 'None' and states(sensor) | int(default=0) <= 5 %}
              {% if loop.first %} {{'\u26A0\uFE0F'}} Batterie {% else %}, {% endif %}
              {{ state_attr(sensor, 'friendly_name') }} {{ states(sensor) }}%
            {% endfor %}
  #           nas: >
  #             {% if is_state('binary_sensor.nas_internet_access', 'off') %}
  #               {{'\u26A0\uFE0F'}} Kontrollera NAS internetåtkomst
  #             {% endif %}

#       - unique_id: updates
#         state: template
#         attributes:
#           esphome: >
#             {% macro f(e) %}
#               {{- states('sensor.gosund_' + e + '_esphome_version') -}}
#             {% endmacro %}
#             {% set group = [f('monitors'), f('ac'), f('fan')] | min %}
#             {% set installed = group.split()[0] %}
#             {% set latest = states('sensor.esphome_version_latest') %}
#             {% set url = 'https://github.com/esphome/esphome/releases/latest' %}
#             {% if installed != latest %}
#               <b><a href=" " onclick="window.open('{{ url }}');">ESPHome</a></b> {{ installed + ' <b>&rarr;</b> ' + latest }}
#             {% endif %}
#           playactor: >
#             {% set installed = states('sensor.playactor_version_installed') %}
#             {% set latest = states('sensor.playactor_version_latest') %}
#             {% set url = 'https://github.com/dhleong/playactor/releases/latest' %}
#             {% if installed != latest %}
#               <b><a href=" " onclick="window.open('{{ url }}');">playactor</a></b> {{ installed + ' <b>&rarr;</b> ' + latest }}
#             {% endif %}
#           kemperprofiler: >
#             {% set installed = state_attr('sensor.kemper_version', 'profiler_installed') %}
#             {% set latest = state_attr('sensor.kemper_version', 'profiler_latest') %}
#             {% set url = 'https://www.kemper-amps.com/downloads' %}
#             {% if installed != latest %}
#               <b><a href=" " onclick="window.open('{{ url }}');">Kemper Profiler OS</a></b> {{ installed + ' <b>&rarr;</b> ' + latest }}
#             {% endif %}
#           rigmanager: >
#             {% set installed = state_attr('sensor.kemper_version', 'rigmanager_installed') %}
#             {% set latest = state_attr('sensor.kemper_version', 'rigmanager_latest') %}
#             {% set url = 'https://www.kemper-amps.com/downloads' %}
#             {% if installed != latest %}
#               <b><a href=" " onclick="window.open('{{ url }}');">Rig Manager</a></b> {{ installed + ' <b>&rarr;</b> ' + latest }}
#             {% endif %}
#           unifi: >
#             {% set installed = states('sensor.template_udm_version') %}
#             {% set url = 'https://community.ui.com/releases?q=dream+machine' %}
#             {% if is_state('binary_sensor.template_udm_upgradable', 'on') %}
#               <b><a href=" " onclick="window.open('{{ url }}');">UniFi Dream Machine ({{ installed }})</a></b> uppdatering tillgänglig
#             {% endif %}
#           synology: >
#             {% set installed = state_attr('binary_sensor.nas_update_available', 'installed_version') %}
#             {% set latest = state_attr('binary_sensor.nas_update_available', 'latest_available_version') %}
#             {% set url = 'https://www.synology.com/en-global/releaseNote/DSM' %}
#             {% if is_state('binary_sensor.nas_update_available', 'on') %}
#               <b><a href=" " onclick="window.open('{{ url }}');">Synology DSM</a></b> {{ installed + ' <b>&rarr;</b> ' + latest }}
#             {% endif %}
#
#      - unique_id: domain_counter
#        state: >
#          {{ states | count }}
#        attributes:
#          automation: >
#            {{ states.automation | count }}
#          binary_sensor: >
#            {{ states.binary_sensor | count }}
#          device_tracker: >
#            {{ states.device_tracker | count }}
#          light: >
#            {{ states.light | count }}
#          media_player: >
#            {{ states.media_player | count }}
#          sensor: >
#            {{ states.sensor | count }}
#          switch: >
#            {{ states.switch | count }}
#          other: >
#            {{ states.calendar | count +
#            states.camera | count +
#            states.climate | count +
#            states.fan | count +
#            states.input_boolean | count +
#            states.input_number | count +
#            states.input_select | count +
#            states.lock | count +
#            states.person | count +
#            states.remote | count +
#            states.scene | count +
#            states.script | count +
#            states.select | count +
#            states.sun | count +
#            states.timer | count +
#            states.vacuum | count +
#            states.weather | count +
#            states.zone | count }}
#
#      - unique_id: udm_cpu
#        state: >
#          {{ states('sensor.udm_unifios').split('|\n')[0] | default }}
#        attributes:
#          friendly_name: Processor
#          icon: mdi:chip
#          unit_of_measurement: '%'
#
#      - unique_id: udm_cpu_temp
#        state: >
#          {{ states('sensor.udm_unifios').split('|\n')[1] | default }}
#        attributes:
#          friendly_name: Processortemperatur
#          icon: mdi:thermometer
#          unit_of_measurement: '°C'
#
#      - unique_id: udm_mem
#        state: >
#          {{ states('sensor.udm_unifios').split('|\n')[2] | default }}
#        attributes:
#          friendly_name: Minne
#          icon: mdi:memory
#          unit_of_measurement: '%'
#
#      - unique_id: udm_disk
#        state: >
#          {{ states('sensor.udm_unifios').split('|\n')[3] | default }}
#        attributes:
#          friendly_name: Lagring
#          icon: mdi:harddisk
#          unit_of_measurement: '%'
#
#      - unique_id: udm_uptime
#        state: >
#          {{ states('sensor.udm_unifios').split('|\n')[5] | default }}
#        attributes:
#          friendly_name: Senaste omstart
#          device_class: timestamp
#
#      - unique_id: udm_version
#        state: >
#          {{ states('sensor.udm_unifios').split('|\n')[6] | default }}
#        attributes:
#          friendly_name: Version
#          icon: mdi:router-wireless
#
#      - unique_id: nas_status
#        state: >
#          {% set entity_id = 'sensor.nas_volume_1_status' %}
#          {% if is_state(entity_id, 'normal') %}
#            Bra
#          {% elif is_state(entity_id, 'background_scrubbing') %}
#            Dataskrubbning
#          {% else %}
#            {{ states(entity_id) }}
#          {% endif %}
#        attributes:
#          friendly_name: Systemhälsa
#          icon: custom:synology-nas
#
#      - unique_id: hass_version
#        state: >
#          {{ 'Senaste' if states('sensor.hass_version_installed') ==
#          states('sensor.hass_version_latest') else states('sensor.hass_version_latest') }}
#        attributes:
#          friendly_name: >
#            Installerad {{ states('sensor.hass_version_installed') }}
#          icon: mdi:home-assistant
#
#      - unique_id: hass_dev_release
#        state: >
#          {{ (as_timestamp(state_attr('calendar.home_assistant_devs', 'start_time'), default=0) + 60*60*18) | timestamp_local(default) }}
#        attributes:
#          friendly_name: >
#            {% set release = state_attr('calendar.home_assistant_devs','message') %}
#            {% if release == 'Home Assistant Core Beta Release' %}
#              Nästa beta
#            {% elif release == 'Home Assistant Core Release' %}
#              Nästa release
#            {% else %}
#              {{ release }}
#            {% endif %}
#          icon: mdi:dev-to
#          device_class: timestamp
#
#      - unique_id: hacs_version
#        state: >
#          {{ device_attr(device_id('sensor.hacs'), 'sw_version') }}
#
#
#      - unique_id: imac_macintosh_hd
#        state: >
#          {{ 100 - states('sensor.mattias_imac_storage') | float }}
#        attributes:
#          friendly_name: Macintosh HD
#          icon: custom:imac-ssd
#          unit_of_measurement: '%'
#
#      - unique_id: fullykiosk_last_app_start
#        state: >
#          {{ as_timestamp(states('sensor.galaxy_tab_a_last_app_start'), default=0) | timestamp_local(default=0) }}
#        attributes:
#          friendly_name: Senast omstart
#          icon: mdi:update
#          device_class: timestamp
#
#      - unique_id: fullykiosk_storage
#        state: >
#          {% set FreeSpace = states('sensor.galaxy_tab_a_internal_storage_free_space') | float(default=0) %}
#          {% set TotalSpace = states('sensor.galaxy_tab_a_internal_storage_total_space') | float(default=0) %}
#          {% if not (FreeSpace == 0.0 or TotalSpace == 0.0) %}
#            {{ 100 - (FreeSpace / TotalSpace * 100) | int(default=0) }}
#          {% endif %}
#        attributes:
#          friendly_name: Lagring
#          icon: mdi:sd
#          unit_of_measurement: '%'
#
#      - unique_id: fullykiosk_memory
#        state: >
#          {% set FreeMemory = states('sensor.galaxy_tab_a_ram_free_memory') | float(default=0) %}
#          {% set TotalMemory = states('sensor.galaxy_tab_a_ram_total_memory') | float(default=0) %}
#          {% if not (FreeMemory == 0.0 or TotalMemory == 0.0) %}
#            {{ 100 - (FreeMemory / TotalMemory * 100) | int(default=0) }}
#          {% endif %}
#        attributes:
#          friendly_name: Minne
#          icon: mdi:memory
#          unit_of_measurement: '%'
